// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Molecule
 *
 * This is a simple API to list URLs and port mappings from a Nomad cluster
 *
 * API version: 1.0.0
 */

package moleculeserver

import (
	"net/http"
	"strings"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"Healthcheck": Route{
			strings.ToUpper("Get"),
			"/health",
			c.Healthcheck,
		},
		"GetURLs": Route{
			strings.ToUpper("Get"),
			"/v1/urls",
			c.GetURLs,
		},
		"GetServiceURLs": Route{
			strings.ToUpper("Get"),
			"/v1/urls/services",
			c.GetServiceURLs,
		},
		"GetHostURLs": Route{
			strings.ToUpper("Get"),
			"/v1/urls/hosts",
			c.GetHostURLs,
		},
		"GetTraefikURLs": Route{
			strings.ToUpper("Get"),
			"/v1/urls/traefik",
			c.GetTraefikURLs,
		},
	}
}

// Healthcheck - Healthcheck endpoint
func (c *DefaultAPIController) Healthcheck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Healthcheck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetURLs - Get URLs
func (c *DefaultAPIController) GetURLs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var printParam bool
	if query.Has("print") {
		param, err := parseBoolParameter(
			query.Get("print"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "print", Err: err}, nil)
			return
		}

		printParam = param
	} else {
		var param bool = false
		printParam = param
	}
	result, err := c.service.GetURLs(r.Context(), printParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetServiceURLs - Get service host and ports
func (c *DefaultAPIController) GetServiceURLs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetServiceURLs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetHostURLs - Get host reserverd URLs
func (c *DefaultAPIController) GetHostURLs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetHostURLs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetTraefikURLs - Get Traefik proxied URLs
func (c *DefaultAPIController) GetTraefikURLs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTraefikURLs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
